#!/usr/bin/env python

import os

Import("env")
Import("env_modules")

env_bluetooth = env_modules.Clone()

# Thirdparty source files

thirdparty_dir = "src/"
thirdparty_obj = []
thirdparty_sources = ["bluetooth_dummy.cpp"]
thirdparty_platform = "DUMMY"

if env["platform"] == "x11":
    if os.system("pkg-config --with-path=thirdparty/qt6/lib/pkgconfig --exists Qt6Bluetooth") == 0:
        thirdparty_platform = "X11"
    else:
        print("Error: Bluetooth Module: Qt6Bluetooth library not found. Dummy using.")
else:
    print("Warning: Bluetooth Module: Platform not supported. Dummy using.")

if thirdparty_platform == "X11":
    env_bluetooth.ParseConfig("pkg-config Qt6Bluetooth --cflags")
    env.ParseConfig("pkg-config Qt6Bluetooth --libs")
    thirdparty_sources += ["bluetooth_bluez.cpp"]

env_bluetooth.Prepend(CPPPATH=[thirdparty_dir])
env_bluetooth.Append(
    CPPDEFINES=["GODOT_BLUETOOTH", f"GODOT_BLUETOOTH_P_{thirdparty_platform}", "QT_NO_DEBUG"],
    CXXFLAGS=["-std=c++17", "-std=gnu++17"]
)

thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

env_thirdparty = env_bluetooth.Clone()
# env_thirdparty.disable_warnings()
env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
env.modules_sources += thirdparty_obj

# Godot source files

module_obj = []

env_bluetooth.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)

# from pprint import pprint; pprint(vars(env))