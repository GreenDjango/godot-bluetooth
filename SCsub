#!/usr/bin/env python

Import("env")
Import("env_modules")

env_bluetooth = env_modules.Clone()

# Thirdparty source files

thirdparty_dir = "src/"
thirdparty_obj = []
thirdparty_sources = ["bluetooth_dummy.cpp"]
thirdparty_platform = "DUMMY"

if env["platform"] == "x11":
    thirdparty_platform = "X11"
    thirdparty_sources += ["bluetooth_bluez.cpp"]

thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

env_bluetooth.Prepend(CPPPATH=[thirdparty_dir])
env_bluetooth.Append(
    CPPDEFINES=[
        "GODOT_BLUETOOTH",
        "QT_BLUETOOTH_LIB", "QT_CORE_LIB", "QT_DBUS_LIB", "QT_NETWORK_LIB", "QT_NO_DEBUG",
        f"GODOT_BLUETOOTH_P_{thirdparty_platform}"
    ],
    CXXFLAGS=["-std=c++17", "-std=gnu++17"]
)
env_bluetooth.AppendUnique(CXXFLAGS=('-isystem', '/usr/include/qt6'))
env_bluetooth.AppendUnique(CXXFLAGS=('-isystem', '/usr/include/qt6/QtBluetooth'))
env_bluetooth.AppendUnique(CXXFLAGS=('-isystem', '/usr/include/qt6/QtCore'))
env_bluetooth.AppendUnique(CXXFLAGS=('-isystem', '/usr/include/qt6/QtNetwork'))
env_bluetooth.AppendUnique(CXXFLAGS=('-isystem', '/usr/include/qt6/QtDBus'))

env_thirdparty = env_bluetooth.Clone()
# env_thirdparty.disable_warnings()
env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
env.modules_sources += thirdparty_obj

# Godot source files

module_obj = []

env_bluetooth.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)

env.Append(LIBS=["Qt6Bluetooth", "Qt6Core", "libQt6Network", "Qt6DBus"])

# from pprint import pprint; pprint(vars(env))